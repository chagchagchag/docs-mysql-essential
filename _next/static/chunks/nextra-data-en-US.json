{"/database-index/covering-index":{"title":"Covering Index","data":{}},"/database-index/notitle":{"title":"Notitle","data":{"메모리-쓰기시-장애를-보완---wal#메모리 쓰기시 장애를 보완 - WAL":"데이터베이스의 데이터는 최종적으로 디스크에 저장됩니다. 디스크는 메모리에 비해 성능이 많이 떨어집니다. 따라서 데이터베이스 성능에 있어서 핵심으로 두는 중점사항은 \"디스크로의 랜덤I/O 를 최소화하는 것\" 입니다.디스크 접근에는 순차 I/O 와 랜덤 I/O 가 있습니다. 순차 I/O는 가장 마지막에 읽었던 위치만 알고 있으면 되기에 쓰기 위치를 파악하는데에 있어서 많은 시간이 소요되지 않습니다. 랜덤 I/O 의 경우 원하는 데이터의 위치를 찾은 후 그 위치에 쓰기/수정 작업을 해야 하는데 이때 디스크에 접근하는 비용이 메모리에 접근하는 것에 비해 꽤 큽니다.이런 경우 디스크에 접근하는 횟수를 줄이는 대신 메모리에 캐시 히트율을 높인다면 쓰기에 소요되는 비용이 줄어듭니다. 하지만 이 경우 메모리의 데이터가 유실될 수 있다는 점 역시 고려해야 합니다. 데이터베이스에 장애가 발생하면, 메모리에 있는 내용들은 디스크에 반영되지 않기에 디스크의 내용과 메모리의 내용이 일치하지 않는 상황이 발생할 수 있습니다. 이런 이유로 대부분의 데이터베이스는 이런 경우에 대비해 WAL(Write Ahead Log) 기반으로 동작합니다.\nWAL (Write Ahead Log)\n데이터베이스는 쿼리 수행 전에 어떤 쿼리를 사용하는지 실행하려 했던 쿼리들의 기록을 디스크에 순차기록을 해둡니다. 따라서 장애 등으로 인해 수행되지 않은 쿼리 들은 이 WAL 이라는 곳에서 읽어서 장애를 복구할 때 WAL에 쌓아둔 실행되지 않는 쿼리를 디스크에 반영합니다. 이렇게 해서 유실될 수 있는 쿼리 요청으로 인해 장애 직전 메모리에 남아있었던 결과와 디스크에 기록된 내용들이 달라질 수 있는 문제로 인한 데이터의 싱크가 깨지는 현상을 해결이 가능합니다. 이렇게 실행하려는 쿼리의 기록을 디스크에 순차 기록을 해두어 데이터의 싱크가 깨지는 현상을 방지하는 기술을 WAL(Write Ahead Log) 라고 부릅니다.","저장장치-별-latency#저장장치 별 Latency":"Latency Numbers Every Programmer Should Know\ngist.github.com/jboner/latency.txt","인덱스#인덱스":"","b-tree#B+ Tree":""}},"/":{"title":"Introduction","data":{"":"MySQL 의 기본적인 내용들 Docs"}},"/database-index/what-is-index":{"title":"What Is Index","data":{"index-기본-원리-자료구조#index 기본 원리, 자료구조":""}},"/transaction/what-is-mvcc":{"title":"What Is Mvcc","data":{}},"/primary-things/normalization-denormalization":{"title":"Normalization Denormalization","data":{}},"/transaction/what-is-acid":{"title":"What Is Acid","data":{}},"/database-index/important-things-when-using-index":{"title":"Important Things When Using Index","data":{}},"/transaction/transaction-isolation-level":{"title":"Transaction Isolation Level","data":{}},"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/database-index/cluster-index":{"title":"Cluster Index","data":{}}}