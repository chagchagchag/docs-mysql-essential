(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[993],{9770:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/transaction/what-is-mvcc",function(){return t(2388)}])},2388:function(n,e,t){"use strict";t.r(e),t.d(e,{__toc:function(){return c}});var i=t(5893),s=t(2673),o=t(373),r=t(8426);t(9128);var a=t(2643);let c=[{depth:2,value:"MVCC (Multi Version Concurrency Control)",id:"mvcc-multi-version-concurrency-control"},{depth:2,value:"동시성 제어 (Concurrency Control)",id:"동시성-제어-concurrency-control"},{depth:3,value:"동시성 제어의 종류 (Pessimistic, Optimistic)",id:"동시성-제어의-종류-pessimistic-optimistic"},{depth:2,value:"MVCC (Multi Version Concurrency Control)",id:"mvcc-multi-version-concurrency-control-1"},{depth:2,value:"DBMS 별 트랜잭션 격리 수준",id:"dbms-별-트랜잭션-격리-수준"}];function _createMdxContent(n){let e=Object.assign({h2:"h2",p:"p",h3:"h3",a:"a",strong:"strong",ul:"ul",li:"li"},(0,a.a)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"mvcc-multi-version-concurrency-control",children:"MVCC (Multi Version Concurrency Control)"}),"\n",(0,i.jsx)(e.p,{children:'MVCC (Multi Version Concurrency Control) 는 "다중 버전 동시성 제어"라고 불립니다.'}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(e.p,{children:['MVCC 를 알아보기 전에 먼저 "동시성제어 (Concurrency Control)"를 먼저 알아보고, MVCC 는 무엇인지 알아봅니다.',(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.h2,{id:"동시성-제어-concurrency-control",children:"동시성 제어 (Concurrency Control)"}),"\n",(0,i.jsxs)(e.p,{children:["주로 트랜잭션의 격리성을 확보하기 위해 동시성 제어가 필요합니다. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(e.p,{children:["DBMS 에 다수의 사용자로부터 동시에 트랜잭션이 발생할 때 트랜잭션 사이에 상호간섭이 발생할 수 있는 상황이 발생하는데 이런 상황에 대해 Database 를 보호하는 것을 의미합니다. 동시성을 낮추면 데이터의 일관성이 낮아져서 서로 다른 트랜잭션에서 바라보는 데이터가 다를 경우가 있습니다. 반면 동시성을 높이면 데이터의 일관성은 높아집니다.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.h3,{id:"동시성-제어의-종류-pessimistic-optimistic",children:"동시성 제어의 종류 (Pessimistic, Optimistic)"}),"\n",(0,i.jsxs)(e.p,{children:["동시성 제어를 위해서는 낙관적 락, 비관적 락을 사용합니다. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(e.p,{children:["낙관적 락의 경우 애플리케이션 레벨에서 시간, 버전 등을 기록해서 이것을 통해서 충돌 여부를 감지하고 변경 여부를 롤백하는 것을 의미합니다. 낙관적 락은 데이터의 버전별로 독자적으로 트랜잭션을 수행할 수 있기 때문에 동시성이 높습니다. 하지만 충돌시 롤백 처리를 직접 구현해야 하고, 충돌 처리 시에 데이터를 불러오거나 하는 등의 작업을 해야 하기에 연산 비용이 크기도 합니다.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(e.p,{children:["비관적 락의 경우 데이터베이스에서 제공하는 SELECT FOR UPDATE, SELECT FOR SHARE 와 같은 SQL 을 사용하는 것을 의미합니다. 락을 배타적으로 걸어서 락을 걸기로 선택한 자원에 대한 접근이 제한되게 됩니다. 데이터의 일관성을 높은 수준으로 제공할 수 있고 격리수준을 높여서 다른 트랜잭션의 접근을 방어할 수 있다는 점은 좋습니다. 하지만 배타적으로 락을 걸기 때문에 동시성 성능이 급감하게 되고 데드락이 발생할 확률이 높은 편이기에 대규모 트래픽에서 사용하기에는 적절하지 않습니다.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(e.p,{children:["낙관적 락, 비관적 락에 대해 쉬운 자료를 찾고 싶으시다면 ",(0,i.jsx)(e.a,{href:"https://sjh9708.tistory.com/66",children:"낙관적 락과 비관적 락"})," 을 참고해주시기 바랍니다.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.h2,{id:"mvcc-multi-version-concurrency-control-1",children:"MVCC (Multi Version Concurrency Control)"}),"\n",(0,i.jsxs)(e.p,{children:["트랜잭션의 격리 수준을 보장하기 위해 비관적락, 낙관적 락을 사용해서 동시성 제어를 할 수도 있지만, 상용 DBMS들은 락을 사용하지 않고도 동시성을 제공 가능하도록 ",(0,i.jsx)(e.strong,{children:"다중버전 동시성 제어 (MVCC (Multi Version Concurrency Control))"})," 기능을 제공합니다.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(e.p,{children:["MySQL 의 경우 Undo Segment 방식을 통해 MVCC 기능을 제공하고, PostgreSQL의 경우 MGA 방식을 통해 MVCC 기능을 제공합니다.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.p,{children:"Undo Segment 방식"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"최신 데이터는 기존 데이터 블록의 레코드에 반영한다."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"변경 전의 값은 undo 영역이라는 별도의 공간에 저장하고, 갱신에 대한 버전관리를 한다."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["자세한 내용은 ",(0,i.jsx)(e.a,{href:"https://techblog.woowahan.com/6550/",children:"우아한 형제들 기술블로그 - Aurora MySQL vs Aurora PostgreSQL"})," 을 참고해주시기 바랍니다."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.p,{children:"MGA 방식"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"튜플을 Update 할 때 새로운 값으로 replace 하지 않고 이전 튜플은 유효범위를 마킹해서 처리하는 방식"}),"\n",(0,i.jsx)(e.li,{children:"MGA 방식은 트리 구조를 이용하는데, 짧은 시간 내에 같은 행을 수정하는 단발성 업데이트 작업의 빈도가 많다면 당연히 MVCC 로 인해 데드 트리가 많이 생기는데, 이 양이 많아지면 N^M 과 같은 어마 어마한 양의 디스크 사용량이 발생할 수 있다는 사실을 기억해두어야 합니다."}),"\n",(0,i.jsx)(e.li,{children:"따라서 PostgreSQL 은 Insert/Select 위주의 서비스라면 적합하겠지만, Update 가 많은 시스템에는 MVCC 로 인해 운영상에 이슈가 자주 발생할 소지가 있습니다. 예를 들어 증권데이터처럼 주식에 대한 현재가격이 계속해서 변해야 하는 시스템에는 MVCC 로 인해 발생하는 데드 튜플들을 청소해줘야 하므로 주기적으로 Vaccum 을 수행해줘야 하고, 쓰지 않는 디스크 공간의 파편화가 자주 발생하는 등 부적합한 요소들이 많습니다."}),"\n",(0,i.jsxs)(e.li,{children:["자세한 내용은 ",(0,i.jsx)(e.a,{href:"https://medium.com/@fineroot1253/postgresql-mvcc-ssl-2f3ba4ce12da",children:"PostgreSQL MVCC/SQL"})," 을 참고해주시기 바랍니다."]}),"\n"]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.h2,{id:"dbms-별-트랜잭션-격리-수준",children:"DBMS 별 트랜잭션 격리 수준"}),"\n",(0,i.jsx)(e.p,{children:"DBMS별로 기본으로 설정된 트랜잭션 격리수준은 아래와 같습니다."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["MySQL (InnoDB 스토리지 엔진을 사용할 경우)","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Repeatable Read"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Oracle","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Read Committed"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Postgresql","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Read Committed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["대부분의 Database는 Read Committed 이상의 레벨을 기본 격리수준으로 채택하고 있습니다.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)("br",{})]})}let l={MDXContent:function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.a)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(_createMdxContent,{...n})}):_createMdxContent(n)},pageOpts:{filePath:"pages/transaction/what-is-mvcc.mdx",route:"/transaction/what-is-mvcc",timestamp:1708922226e3,pageMap:[{kind:"MdxPage",name:"about",route:"/about"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"jpa-vs-mybatis-jdbctemplate",route:"/jpa-vs-mybatis-jdbctemplate"},{kind:"MdxPage",name:"memory-disk-wal",route:"/memory-disk-wal"},{kind:"MdxPage",name:"mysql-architecture",route:"/mysql-architecture"},{kind:"MdxPage",name:"mysql-index",route:"/mysql-index"},{kind:"MdxPage",name:"normalization-denormalization",route:"/normalization-denormalization"},{kind:"MdxPage",name:"query-cache",route:"/query-cache"},{kind:"Folder",name:"transaction",route:"/transaction",children:[{kind:"MdxPage",name:"intro",route:"/transaction/intro"},{kind:"MdxPage",name:"transaction-be-careful",route:"/transaction/transaction-be-careful"},{kind:"MdxPage",name:"transaction-isolation-level",route:"/transaction/transaction-isolation-level"},{kind:"MdxPage",name:"transactional-annotation",route:"/transaction/transactional-annotation"},{kind:"MdxPage",name:"transactional-propagation-option",route:"/transaction/transactional-propagation-option"},{kind:"MdxPage",name:"what-is-acid",route:"/transaction/what-is-acid"},{kind:"MdxPage",name:"what-is-mvcc",route:"/transaction/what-is-mvcc"},{kind:"Meta",data:{intro:"소개","what-is-mvcc":"MVCC","what-is-acid":"트랜잭션의 기본 4원칙 (ACID)","transaction-isolation-level":"트랜잭션 격리수준","transaction-be-careful":"트랜잭션 사용시 주의점","transactional-annotation":"스프링의 @Transactional","transactional-propagation-option":"트랜잭션 전파 옵션"}}]},{kind:"MdxPage",name:"uuid-vs-auto-increment",route:"/uuid-vs-auto-increment"},{kind:"Folder",name:"when-you-choose-dbms",route:"/when-you-choose-dbms",children:[{kind:"MdxPage",name:"sometimes-nosql-is-better-choice",route:"/when-you-choose-dbms/sometimes-nosql-is-better-choice"},{kind:"MdxPage",name:"when-you-choose-mysql-postgresql",route:"/when-you-choose-dbms/when-you-choose-mysql-postgresql"},{kind:"Meta",data:{"when-you-choose-mysql-postgresql":"MySQL, PostgreSQL 선택시 고려해볼 것들","sometimes-nosql-is-better-choice":"NoSQL이 더 좋은 선택일 경우 (feat. Subset 패턴)"}}]},{kind:"Meta",data:{index:"Introduction","mysql-index":"인덱스","normalization-denormalization":"정규화, 반정규화",transaction:"트랜잭션","mysql-architecture":"MySQL 구조","memory-disk-wal":"Memory vs Disk, WAL","query-cache":"쿼리 캐시","when-you-choose-dbms":"DBMS 별 선택이 필요할 때","uuid-vs-auto-increment":"UUID vs Auto Increment","jpa-vs-mybatis-jdbctemplate":"JPA vs Mybatis, JdbcTemplate",about:{title:"About",type:"page"},contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"What Is Mvcc",headings:c},pageNextRoute:"/transaction/what-is-mvcc",nextraLayout:o.ZP,themeConfig:r.Z};e.default=(0,s.j)(l)},8426:function(n,e,t){"use strict";var i=t(5893);t(7294);let s={logo:(0,i.jsx)("span",{children:"My Project"}),project:{link:"https://github.com/chagchagchag/docs-mysql-essential"},docsRepositoryBase:"https://github.com/chagchagchag/docs-mysql-essential",footer:{text:"Nextra Docs Template"}};e.Z=s},5789:function(){}},function(n){n.O(0,[774,796,888,179],function(){return n(n.s=9770)}),_N_E=n.O()}]);