(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[452],{3910:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/query-cache",function(){return t(3367)}])},3367:function(e,n,t){"use strict";t.r(n),t.d(n,{__toc:function(){return c}});var a=t(5893),o=t(2673),i=t(373),s=t(8426);t(9128);var r=t(2643);let c=[{depth:2,value:"쿼리 캐시",id:"쿼리-캐시"},{depth:2,value:"쿼리 캐시란",id:"쿼리-캐시란"},{depth:2,value:"MySQL 5.0 → MySQL 8.0",id:"mysql-50--mysql-80"},{depth:2,value:"참고) 오라클 : 소프트파싱, 하드파싱",id:"참고-오라클--소프트파싱-하드파싱"}];function _createMdxContent(e){let n=Object.assign({h2:"h2",p:"p",code:"code",strong:"strong",ul:"ul",li:"li",blockquote:"blockquote"},(0,r.a)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"쿼리-캐시",children:"쿼리 캐시"}),"\n",(0,a.jsx)(n.h2,{id:"쿼리-캐시란",children:"쿼리 캐시란"}),"\n",(0,a.jsxs)(n.p,{children:["쿼리캐시에 SQL 과 데이터를 매핑해서 가지고 있다가 똑같은 SQL이 왔을때 캐시에 보관해둔 결과물을 응답하도록 캐시에 SQL의 결과를 보관하고 있는 것을 의미합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["쿼리 캐시는 데이터를 캐시하기 때문에 테이블의 데이터가 변경되면 캐시의 데이터도 함께 업데이트해줘야 합니다. 이런 업데이트 작업으로 인해 락(",(0,a.jsx)(n.code,{children:"Lock"}),") 이슈가 있었고 이런 이슈는 이익보다는 단점도 크고 캐시 데이터 관리에 대한 비용(성능상의 단점)이 컸기에 8.0 이후로는 MySQL 에서 쿼리 캐시 기능은 폐기 되었습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["다른 데이터베이스에도 쿼리 캐시와 유사한 기능이 있습니다. 오라클에서도 쿼리캐시와 비슷한 기능을 ",(0,a.jsx)(n.code,{children:"소프트 캐시"})," 라는 이름으로 제공하기는 하지만, MySQL 처럼 SQL에 대한  데이터 까지는 매핑하지는 않고 ",(0,a.jsx)(n.strong,{children:"실행 계획 까지만 캐싱"}),"을 합니다. 즉, 오라클은 MySQL 과 쿼리 캐시가 다르며 실행 계획까지만 제공한다는 점에서 MySQL과는 차이가 있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"mysql-50--mysql-80",children:"MySQL 5.0 → MySQL 8.0"}),"\n",(0,a.jsxs)(n.p,{children:["MySQL 5.0 까지는 쿼리 캐시 기능이 있었지만, MySQL 8.0 부터는 쿼리 캐시 기능이 폐기되었습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["테이블의 데이터가 변경되면, 쿼리캐시에도 똑같이 변경된 내용을 반영해야 하는데 이 과정에서 락과 같은 이슈가 있었고 쿼리 캐시로 인해 이점보다는 문제점이 크기에 8.0 이후로는 폐기되었습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"참고-오라클--소프트파싱-하드파싱",children:"참고) 오라클 : 소프트파싱, 하드파싱"}),"\n",(0,a.jsxs)(n.p,{children:["오라클에는 소프트파싱, 하드파싱이라는 개념이 있습니다.",(0,a.jsx)("br",{}),"\r\n소프트파싱, 하드 파싱의 개념은 아래와 같습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.p,{children:"소프트파싱"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"실행 계획을 캐시에서 찾아서 옵티마이저 과정 생략 후 실행단계로 넘어갑니다."}),"\n",(0,a.jsx)(n.li,{children:"실행 계획 까지만 캐싱이 됩니다."}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.p,{children:"하드 파싱"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"실행 계획을 캐시에서 찾지 못했을 경우 옵티마이저 과정을 거친 후 실행단계로 넘어갑니다."}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(n.p,{children:["하지만 오라클은 5.0 대의 MySQL 처럼 모든 SQL과 매핑해서 데이터까지 캐싱하지는 않습니다. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["물론 힌트나 설정으로 모든 SQL과 매핑해서 데이터까지 캐싱하는 것이 가능하기는 하지만  오라클에서 기본적으로 제공되는 기능은 아닙니다.",(0,a.jsx)("br",{})]}),"\n"]})]})}let d={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.a)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/query-cache.mdx",route:"/query-cache",timestamp:1708866516e3,pageMap:[{kind:"MdxPage",name:"about",route:"/about"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"memory-disk-wal",route:"/memory-disk-wal"},{kind:"MdxPage",name:"mysql-architecture",route:"/mysql-architecture"},{kind:"MdxPage",name:"mysql-index",route:"/mysql-index"},{kind:"MdxPage",name:"normalization-denormalization",route:"/normalization-denormalization"},{kind:"MdxPage",name:"query-cache",route:"/query-cache"},{kind:"Folder",name:"transaction",route:"/transaction",children:[{kind:"MdxPage",name:"intro",route:"/transaction/intro"},{kind:"MdxPage",name:"transaction-isolation-level",route:"/transaction/transaction-isolation-level"},{kind:"MdxPage",name:"transactional-annotation",route:"/transaction/transactional-annotation"},{kind:"MdxPage",name:"transactional-propagation-option",route:"/transaction/transactional-propagation-option"},{kind:"MdxPage",name:"what-is-acid",route:"/transaction/what-is-acid"},{kind:"MdxPage",name:"what-is-mvcc",route:"/transaction/what-is-mvcc"},{kind:"Meta",data:{intro:"소개","what-is-mvcc":"MVCC","what-is-acid":"트랜잭션의 기본 4원칙 (ACID)","transaction-isolation-level":"트랜잭션 격리수준","transactional-annotation":"스프링의 @Transactional","transactional-propagation-option":"트랜잭션 전파 옵션"}}]},{kind:"MdxPage",name:"uuid-vs-auto-increment",route:"/uuid-vs-auto-increment"},{kind:"Folder",name:"when-you-choose-dbms",route:"/when-you-choose-dbms",children:[{kind:"MdxPage",name:"sometimes-nosql-is-better-choice",route:"/when-you-choose-dbms/sometimes-nosql-is-better-choice"},{kind:"MdxPage",name:"when-you-choose-mysql-postgresql",route:"/when-you-choose-dbms/when-you-choose-mysql-postgresql"},{kind:"Meta",data:{"when-you-choose-mysql-postgresql":"MySQL, PostgreSQL 선택시 고려해볼 것들","sometimes-nosql-is-better-choice":"NoSQL이 더 좋은 선택일 경우 (feat. Subset 패턴)"}}]},{kind:"Meta",data:{index:"Introduction","mysql-index":"인덱스","normalization-denormalization":"정규화, 반정규화",transaction:"트랜잭션","mysql-architecture":"MySQL 구조","memory-disk-wal":"Memory vs Disk, WAL","query-cache":"쿼리 캐시","when-you-choose-dbms":"DBMS 별 선택이 필요할 때","uuid-vs-auto-increment":"UUID vs Auto Increment",about:{title:"About",type:"page"},contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"Query Cache",headings:c},pageNextRoute:"/query-cache",nextraLayout:i.ZP,themeConfig:s.Z};n.default=(0,o.j)(d)},8426:function(e,n,t){"use strict";var a=t(5893);t(7294);let o={logo:(0,a.jsx)("span",{children:"My Project"}),project:{link:"https://github.com/chagchagchag/docs-mysql-essential"},docsRepositoryBase:"https://github.com/chagchagchag/docs-mysql-essential",footer:{text:"Nextra Docs Template"}};n.Z=o},5789:function(){}},function(e){e.O(0,[774,796,888,179],function(){return e(e.s=3910)}),_N_E=e.O()}]);